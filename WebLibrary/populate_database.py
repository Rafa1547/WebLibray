#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para popular a base de dados da WebLibrary com dados de teste.
"""

import sqlite3
import os
import sys
from datetime import datetime, timedelta
from werkzeug.security import generate_password_hash
import random

def get_db_path():
    """Retorna o caminho da base de dados"""
    return os.path.join(os.path.dirname(__file__), 'src', 'database', 'weblibrary.db')

def create_connection():
    """Cria conex√£o com a base de dados"""
    db_path = get_db_path()
    os.makedirs(os.path.dirname(db_path), exist_ok=True)
    conn = sqlite3.connect(db_path)
    conn.row_factory = sqlite3.Row
    return conn

def insert_users(conn):
    """Inserir utilizadores de teste"""
    print("üìù Inserindo utilizadores...")
    
    users_data = [
        # Admins
        ('Ana Silva', 'ana.silva@biblioteca.pt', 'admin123', 'admin'),
        ('Carlos Santos', 'carlos.santos@biblioteca.pt', 'admin123', 'admin'),
        
        # Professores
        ('Maria Jo√£o Pereira', 'maria.pereira@escola.pt', 'prof123', 'professor'),
        ('Jo√£o Manuel Costa', 'joao.costa@escola.pt', 'prof123', 'professor'),
        ('Teresa Rodrigues', 'teresa.rodrigues@escola.pt', 'prof123', 'professor'),
        
        # Alunos
        ('Pedro Gon√ßalves', 'pedro.goncalves@aluno.pt', 'aluno123', 'aluno'),
        ('Sofia Carvalho', 'sofia.carvalho@aluno.pt', 'aluno123', 'aluno'),
        ('Miguel Ferreira', 'miguel.ferreira@aluno.pt', 'aluno123', 'aluno'),
        ('Catarina Lopes', 'catarina.lopes@aluno.pt', 'aluno123', 'aluno'),
        ('Bruno Almeida', 'bruno.almeida@aluno.pt', 'aluno123', 'aluno'),
    ]
    
    cursor = conn.cursor()
    
    for user_data in users_data:
        nome, email, password, tipo = user_data
        hashed_password = generate_password_hash(password)
        
        try:
            cursor.execute("""
                INSERT INTO utilizadores (nome, email, password, tipo)
                VALUES (?, ?, ?, ?)
            """, (nome, email, hashed_password, tipo))
            print(f"  ‚úÖ Utilizador criado: {nome} ({tipo})")
        except sqlite3.IntegrityError:
            print(f"  ‚ö†Ô∏è  Utilizador j√° existe: {email}")
    
    conn.commit()
    print(f"‚úÖ {len(users_data)} utilizadores processados!")

def insert_books(conn):
    """Inserir livros de teste"""
    print("\nüìö Inserindo livros...")
    
    books_data = [
        ('Os Maias', 'E√ßa de Queir√≥s', 'Literatura Cl√°ssica', '9789722036726', 'disponivel', 
         'Romance que retrata a sociedade portuguesa do s√©culo XIX.', 1888, 'Livros do Brasil', 592, 'Portugu√™s'),
        
        ('Memorial do Convento', 'Jos√© Saramago', 'Literatura Cl√°ssica', '9789722018559', 'disponivel',
         'Romance hist√≥rico sobre a constru√ß√£o do Convento de Mafra.', 1982, 'Editorial Caminho', 356, 'Portugu√™s'),
         
        ('Dom Quixote', 'Miguel de Cervantes', 'Literatura Cl√°ssica', '9780060934347', 'disponivel',
         'Obra-prima da literatura espanhola.', 1605, 'Publica√ß√µes Dom Quixote', 863, 'Espanhol'),
         
        ('Cem Anos de Solid√£o', 'Gabriel Garc√≠a M√°rquez', 'Literatura Cl√°ssica', '9788535909147', 'disponivel',
         'Saga da fam√≠lia Buend√≠a em Macondo.', 1967, 'Editorial Sudamericana', 471, 'Espanhol'),
         
        ('Duna', 'Frank Herbert', 'Fic√ß√£o Cient√≠fica', '9788576573486', 'disponivel',
         '√âpico de fic√ß√£o cient√≠fica no planeta Arrakis.', 1965, 'Aleph', 688, 'Ingl√™s'),
         
        ('Foundation', 'Isaac Asimov', 'Fic√ß√£o Cient√≠fica', '9780553293357', 'disponivel',
         'Primeiro livro da s√©rie Foundation.', 1951, 'Aleph', 244, 'Ingl√™s'),
         
        ('Hist√≥ria de Portugal', 'Jos√© Hermano Saraiva', 'Hist√≥ria', '9789722414814', 'disponivel',
         'S√≠ntese da hist√≥ria portuguesa.', 1993, 'Publica√ß√µes Europa-Am√©rica', 512, 'Portugu√™s'),
         
        ('Sapiens', 'Yuval Noah Harari', 'Hist√≥ria', '9788525432681', 'disponivel',
         'Uma breve hist√≥ria da humanidade.', 2011, 'L&PM Editores', 464, 'Hebraico'),
         
        ('Uma Breve Hist√≥ria do Tempo', 'Stephen Hawking', 'Ci√™ncia', '9788580570267', 'disponivel',
         'Os mist√©rios do universo explicados.', 1988, 'Bantam Books', 256, 'Ingl√™s'),
         
        ('Cosmos', 'Carl Sagan', 'Ci√™ncia', '9788535906769', 'disponivel',
         'Jornada atrav√©s do cosmos.', 1980, 'Companhia das Letras', 432, 'Ingl√™s'),
         
        ('A Rep√∫blica', 'Plat√£o', 'Filosofia', '9789722041614', 'disponivel',
         'Di√°logo sobre justi√ßa e a cidade ideal.', -380, 'Funda√ß√£o Calouste Gulbenkian', 512, 'Grego'),
         
        ('Harry Potter e a Pedra Filosofal', 'J.K. Rowling', 'Infantil', '9788532511010', 'disponivel',
         'Primeiro livro da saga Harry Potter.', 1997, 'Rocco', 264, 'Ingl√™s'),
         
        ('Percy Jackson - O Ladr√£o de Raios', 'Rick Riordan', 'Infantil', '9788598078355', 'disponivel',
         'Aventuras na mitologia grega moderna.', 2005, 'Intr√≠nseca', 377, 'Ingl√™s'),
         
        ('Mensagem', 'Fernando Pessoa', 'Literatura Cl√°ssica', '9789722414821', 'disponivel',
         '√önico livro de poemas publicado por Pessoa.', 1934, '√Åtica', 96, 'Portugu√™s'),
         
        ('Steve Jobs', 'Walter Isaacson', 'Biografia', '9788535918304', 'disponivel',
         'Biografia do cofundador da Apple.', 2011, 'Companhia das Letras', 656, 'Ingl√™s'),
         
        # Exemplos das novas categorias
        ('Psicologia: Uma Nova S√≠ntese', 'Michael Eysenck', 'Psicologia', '9788582715123', 'disponivel',
         'Introdu√ß√£o abrangente √† psicologia moderna.', 2017, 'Artmed', 896, 'Ingl√™s'),
         
        ('Anatomia Humana', 'Frank H. Netter', 'Medicina e Sa√∫de', '9788535287134', 'disponivel',
         'Atlas de anatomia humana com ilustra√ß√µes detalhadas.', 2019, 'Elsevier', 672, 'Ingl√™s'),
         
        ('Direito Constitucional', 'Pedro Lenza', 'Direito', '9788547231156', 'disponivel',
         'Manual de direito constitucional brasileiro.', 2020, 'Saraiva', 1584, 'Portugu√™s'),
         
        ('Princ√≠pios de Economia', 'N. Gregory Mankiw', 'Economia', '9788522127030', 'disponivel',
         'Fundamentos da economia moderna.', 2020, 'Cengage Learning', 768, 'Ingl√™s'),
         
        ('Pedagogia da Autonomia', 'Paulo Freire', 'Educa√ß√£o', '9788577531639', 'disponivel',
         'Saberes necess√°rios √† pr√°tica educativa.', 1996, 'Paz e Terra', 144, 'Portugu√™s'),
         
        ('Geografia: O Mundo Subdesenvolvido', 'Yves Lacoste', 'Geografia', '9788571394734', 'disponivel',
         'An√°lise geogr√°fica do desenvolvimento mundial.', 1990, 'Difel', 284, 'Franc√™s'),
         
        ('C√°lculo Volume 1', 'James Stewart', 'Matem√°tica', '9788522112593', 'disponivel',
         'Fundamentos do c√°lculo diferencial e integral.', 2016, 'Cengage Learning', 1024, 'Ingl√™s'),
         
        ('Estruturas de Dados e Algoritmos', 'Michael Goodrich', 'Tecnologia', '9788582603475', 'disponivel',
         'Fundamentos de programa√ß√£o e algoritmos.', 2013, 'Bookman', 720, 'Ingl√™s'),
         
        ('Dicion√°rio Oxford Ingl√™s-Portugu√™s', 'Oxford University Press', 'L√≠nguas', '9780194424691', 'disponivel',
         'Dicion√°rio bil√≠ngue completo.', 2018, 'Oxford', 832, 'Ingl√™s'),
         
        ('Hist√≥ria das Religi√µes', 'Mircea Eliade', 'Religi√£o', '9788533622647', 'disponivel',
         'Estudo comparativo das principais religi√µes.', 2010, 'Martins Fontes', 496, 'Franc√™s'),
         
        ('Como Fazer Amigos e Influenciar Pessoas', 'Dale Carnegie', 'Autoajuda', '9788504018028', 'disponivel',
         'Cl√°ssico do desenvolvimento pessoal.', 1936, 'Companhia Editora Nacional', 312, 'Ingl√™s'),
         
        ('Sabores do Brasil', 'Ana Luiza Trajano', 'Culin√°ria', '9788541300742', 'disponivel',
         'Receitas tradicionais da culin√°ria brasileira.', 2015, 'Melhoramentos', 256, 'Portugu√™s'),
         
                 ('Manual de Educa√ß√£o F√≠sica', 'Jos√© Carlos Barbanti', 'Desporto', '9788520439234', 'disponivel',
          'Fundamentos do treino e exerc√≠cio f√≠sico.', 2010, 'Manole', 448, 'Portugu√™s'),
    ]
    
    cursor = conn.cursor()
    
    for book_data in books_data:
        titulo, autor, categoria, isbn, status, descricao, ano_publicacao, editora, paginas, idioma = book_data
        
        try:
            cursor.execute("""
                INSERT INTO livros (titulo, autor, categoria, isbn, status, descricao, ano_publicacao, editora, paginas, idioma)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (titulo, autor, categoria, isbn, status, descricao, ano_publicacao, editora, paginas, idioma))
            print(f"  ‚úÖ Livro criado: {titulo} - {autor}")
        except sqlite3.IntegrityError:
            print(f"  ‚ö†Ô∏è  Livro j√° existe: {isbn}")
    
    conn.commit()
    print(f"‚úÖ {len(books_data)} livros processados!")

def insert_loans(conn):
    """Inserir empr√©stimos de teste"""
    print("\nüìã Inserindo empr√©stimos...")
    
    cursor = conn.cursor()
    
    # Obter utilizadores n√£o-admin
    cursor.execute("SELECT id FROM utilizadores WHERE tipo != 'admin'")
    user_ids = [row[0] for row in cursor.fetchall()]
    
    # Obter livros dispon√≠veis
    cursor.execute("SELECT id FROM livros WHERE status = 'disponivel'")
    book_ids = [row[0] for row in cursor.fetchall()]
    
    if not user_ids or not book_ids:
        print("‚ö†Ô∏è  Sem utilizadores ou livros dispon√≠veis")
        return
    
    # Criar 10 empr√©stimos ativos
    for i in range(min(10, len(user_ids), len(book_ids))):
        user_id = user_ids[i % len(user_ids)]
        book_id = book_ids[i]
        
        days_ago = random.randint(1, 30)
        data_emprestimo = datetime.now() - timedelta(days=days_ago)
        data_devolucao_prevista = data_emprestimo + timedelta(days=15)
        
        try:
            cursor.execute("""
                INSERT INTO emprestimos (id_utilizador, id_livro, data_emprestimo, data_devolucao_prevista, status)
                VALUES (?, ?, ?, ?, ?)
            """, (user_id, book_id, data_emprestimo, data_devolucao_prevista, 'ativo'))
            
            cursor.execute("UPDATE livros SET status = 'emprestado' WHERE id = ?", (book_id,))
            print(f"  ‚úÖ Empr√©stimo ativo: Utilizador {user_id}, Livro {book_id}")
        except sqlite3.IntegrityError as e:
            print(f"  ‚ö†Ô∏è  Erro: {e}")
    
    # Criar empr√©stimos devolvidos
    used_books = set(book_ids[:10])
    available_books = [bid for bid in book_ids if bid not in used_books]
    
    for i in range(min(15, len(user_ids), len(available_books))):
        user_id = user_ids[i % len(user_ids)]
        book_id = available_books[i % len(available_books)]
        
        days_ago = random.randint(30, 180)
        data_emprestimo = datetime.now() - timedelta(days=days_ago)
        data_devolucao_prevista = data_emprestimo + timedelta(days=15)
        data_devolucao_real = data_devolucao_prevista + timedelta(days=random.randint(-5, 10))
        
        try:
            cursor.execute("""
                INSERT INTO emprestimos (id_utilizador, id_livro, data_emprestimo, data_devolucao_prevista, status, data_devolucao_real)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (user_id, book_id, data_emprestimo, data_devolucao_prevista, 'devolvido', data_devolucao_real))
            
            print(f"  ‚úÖ Empr√©stimo devolvido: Utilizador {user_id}, Livro {book_id}")
        except sqlite3.IntegrityError as e:
            print(f"  ‚ö†Ô∏è  Erro: {e}")
    
    conn.commit()
    print("‚úÖ Empr√©stimos processados!")

def show_statistics(conn):
    """Mostrar estat√≠sticas"""
    print("\nüìä Estat√≠sticas:")
    print("=" * 40)
    
    cursor = conn.cursor()
    
    cursor.execute("SELECT COUNT(*) FROM utilizadores")
    total_users = cursor.fetchone()[0]
    print(f"üë• Utilizadores: {total_users}")
    
    cursor.execute("SELECT COUNT(*) FROM livros")
    total_books = cursor.fetchone()[0]
    print(f"üìö Livros: {total_books}")
    
    cursor.execute("SELECT COUNT(*) FROM emprestimos")
    total_loans = cursor.fetchone()[0]
    print(f"üìã Empr√©stimos: {total_loans}")
    
    print("\n‚úÖ Base de dados populada!")
    print("\nüîê Credenciais:")
    print("Admin: ana.silva@biblioteca.pt / admin123")
    print("Professor: maria.pereira@escola.pt / prof123")
    print("Aluno: pedro.goncalves@aluno.pt / aluno123")

def main():
    """Fun√ß√£o principal"""
    print("üöÄ Popula√ß√£o da Base de Dados WebLibrary")
    print("=" * 50)
    
    try:
        conn = create_connection()
        print(f"‚úÖ Conectado: {get_db_path()}")
        
        insert_users(conn)
        insert_books(conn)
        insert_loans(conn)
        show_statistics(conn)
        
    except Exception as e:
        print(f"‚ùå Erro: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    main() 